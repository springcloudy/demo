buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.1.RELEASE"
        classpath "org.ajoberstar:grgit:1.1.0"
    }
}

ext {
    springBootVersion = "Dalston.RELEASE"
    springBootAdminVersion = "1.5.0"
    springDataflowVersion = "1.2.0.M3"
}

subprojects {
    group 'com.example'

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url 'https://repo.spring.io/release/' }
        maven { url "http://repo.spring.io/libs-snapshot-local" }
        maven { url "http://repo.spring.io/libs-milestone-local" }
        maven { url "http://repo.spring.io/libs-release-local" }
    }

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'groovy'
    //apply plugin: 'application'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springBootVersion"
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.jolokia:jolokia-core:1.3.5'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }

    afterEvaluate {
        if (tasks.findByName("classes")) {
            task sourcesJar(type: Jar, dependsOn: classes) {
                classifier = 'sources'
                from sourceSets.main.allSource
            }
            artifacts {
                archives sourcesJar
            }
        }

        if (tasks.findByName("javadoc")) {
            task javadocJar(type: Jar) {
                dependsOn javadoc
                classifier = 'javadoc'
                from javadoc.destinationDir
                if (tasks.findByName("groovydoc")) {
                    dependsOn groovydoc
                    from groovydoc.destinationDir
                }
            }
            artifacts {
                archives javadocJar
            }
        }
    }
}